---
import type { SpotLightResponse } from "../functions/fetchSpotlight";

interface Props {
  spotlights: SpotLightResponse[];
}

const { spotlights } = Astro.props;
---

<section id="spotlights">
  <div class="container custom-scrollbar">
    <div class="wrapper no-scrollbar">
      {
        spotlights.map((spotlight) => (
          <article>
            <div class="slide">
              <div class="banner">
                <img src={spotlight.banner} alt="" loading="lazy" />
              </div>
              <div class="details">
                <div class="name">
                  <p>{spotlight.title}</p>
                </div>
                <div class="rank grid-card">
                  <div class="font-style-heading card-title">RANK</div>
                  <p>{spotlight.rank}</p>
                </div>
                <div class="description grid-card">
                  <div class="font-style-heading card-title">DESCRIPTION</div>
                  <p>{spotlight.description}</p>
                </div>
                <div class="release grid-card">
                  <div class="font-style-heading card-title">RELEASE DATE</div>
                  <p>{spotlight.releaseDate}</p>
                </div>
                <div class="type grid-card">
                  <div class="font-style-heading card-title">
                    {spotlight.type}
                  </div>
                </div>
                <div class="quality grid-card">
                  <div class="font-style-heading card-title">
                    {spotlight.quality}
                  </div>
                </div>
                <div class="episode">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="captions"
                  >
                    <>
                      <rect width="18" height="14" x="3" y="5" rx="2" ry="2" />
                      <path d="M7 15h4M15 15h2M7 11h2M13 11h4" />
                    </>
                  </svg>
                  <div class="font-style-heading card-title">
                    {spotlight.episodes}
                  </div>
                </div>

                <div class="watch">
                  <a href={`/anime?n=${spotlight.id}`}>
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      class="play"
                    >
                      <polygon points="6 3 20 12 6 21 6 3" />
                    </svg>
                    <div class="font-style-heading card-title">WATCH</div>
                  </a>
                </div>

                <div class="slide-button" id="left-button">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="chevron"
                  >
                    <path d="m15 18-6-6 6-6" />
                  </svg>
                </div>
                <div class="slide-button" id="right-button">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="chevron"
                  >
                    <path d="m9 18 6-6-6-6" />
                  </svg>
                </div>
              </div>
            </div>
          </article>
        ))
      }
    </div>
  </div>
</section>

<style>
  section {
    font-size: var(--font-size);

    --font-size: 0.75rem;
    --font-heading: 1.25rem;
    --font-semiheading: 0.9rem;

    --grid-gap: 0.25rem;
    --border-radius: 0.25rem;
    --grid-item-padding: 0.5rem;
  }

  .container {
    overflow-x: scroll;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
  }

  .wrapper {
    display: flex;
  }

  article {
    width: min(100vw, 1800px);
    height: min-content;
  }
  .slide {
    width: min(100vw, 1800px);
    padding: var(--grid-item-padding);
    scroll-snap-align: center;
  }

  .banner {
    width: 100%;
    aspect-ratio: 16/9;
    border: 1px solid var(--card-border);
    border-radius: var(--border-radius);
    overflow: hidden;
  }

  .banner img {
    object-fit: cover;
    width: 100%;
    height: 100%;
  }

  .details {
    padding-top: var(--grid-item-padding);
    display: grid;

    gap: var(--grid-gap);
    grid-template-columns: repeat(12, 1fr);
    grid-template-rows: repeat(12, 1rem);
  }

  .name {
    padding: var(--grid-item-padding);
    border-radius: var(--border-radius);
    background-color: var(--card-background);
    font-weight: 600;

    display: flex;
    justify-content: center;
    align-items: center;

    grid-column: 1/10;
    grid-row: 1/5;
  }

  .name p {
    font-size: var(--font-heading);
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    line-clamp: 2;
    -webkit-box-orient: vertical;
    text-align: center;
  }

  .grid-card {
    display: flex;
    flex-direction: column;
    gap: var(--grid-item-padding);
  }

  .rank {
    grid-column: 10/13;
    grid-row: 1/5;

    padding: var(--grid-item-padding);

    border: 2px solid var(--card-border);
    border-radius: var(--border-radius);
  }

  .card-title {
    font-weight: 600;
    font-size: var(--font-semiheading);
    letter-spacing: 0.2em;
  }

  .rank p {
    font-size: var(--font-semiheading);
  }

  .description {
    padding: var(--grid-item-padding);
    border-radius: var(--border-radius);
    background-color: var(--card-background);

    grid-column: 7/13;
    grid-row: 5/11;
  }

  .description p {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 4;
    line-clamp: 4;
    -webkit-box-orient: vertical;
  }

  .release {
    grid-column: 1/7;
    grid-row: 5/9;

    padding: var(--grid-item-padding);

    border: 2px solid var(--card-border);
    border-radius: var(--border-radius);
  }

  .release p {
    font-size: var(--font-semiheading);
  }

  .type {
    grid-column: 1/4;
    grid-row: 9/11;
    text-align: center;

    padding: var(--grid-item-padding);

    border: 2px solid var(--card-border);
    border-radius: var(--border-radius);
  }

  .quality {
    grid-column: 4/7;
    grid-row: 9/11;
    text-align: center;

    padding: var(--grid-item-padding);
    border-radius: var(--border-radius);
    background-color: var(--card-background);
  }

  .episode {
    grid-column: 5/9;
    grid-row: 11/13;
    text-align: right;

    position: relative;

    padding: var(--grid-item-padding);

    border: 2px solid var(--card-border);
    border-radius: var(--border-radius);
    background-color: var(--card-background);
  }

  .captions {
    height: 100%;
    position: absolute;
    top: 0;
    left: 0.25rem;
  }

  .slide-button {
    grid-row: 11/13;
    position: relative;

    background-color: transparent;

    padding: var(--grid-item-padding);

    border: 2px solid var(--card-border);
    border-radius: var(--border-radius);
  }
  .slide-button:hover {
    background-color: var(--card-background);
  }
  .light .slide-button {
    color: black;
  }
  .dark .slide-button {
    color: aliceblue;
  }
  #left-button {
    grid-column: 9/11;
  }
  #right-button {
    grid-column: 11/13;
  }
  .chevron {
    position: absolute;
    height: 100%;
    aspect-ratio: 1/1;

    top: 0;
    left: 50%;
    transform: translateX(-50%);
  }

  .watch {
    grid-column: 1/5;
    grid-row: 11/13;

    background-image: var(--accent-gradient);

    padding: 0.25rem;

    border: 2px solid var(--card-border);
    border-radius: var(--border-radius);
  }

  .play {
    height: 100%;
    aspect-ratio: 1/1;
  }

  a {
    text-decoration: none;
    color: currentColor;

    height: 100%;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
  }

  @media (min-width: 1024px) {
    section {
      --font-size: 0.9rem;
      --font-heading: 1.5rem;
      --font-semiheading: 1.25rem;

      --grid-gap: 0.35rem;
      --border-radius: 0.5rem;
      --grid-item-padding: 0.5rem;
    }

    .slide {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      aspect-ratio: 16/4.65;
    }

    .rank p {
      font-size: 2.25rem;
      font-weight: 700;
    }

    .release p {
      font-size: 2.25rem;
      font-weight: 700;
    }

    .banner {
      margin: auto;
    }

    .type,
    .quality {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .episode {
      display: flex;
      align-items: center;
      justify-content: end;
    }

    .description p {
      -webkit-line-clamp: 5;
      line-clamp: 5;
    }

    .details {
      padding-top: 0;
      padding-left: var(--grid-item-padding);
      grid-template-rows: repeat(12, 1.25rem);
      margin: auto;
    }
  }

  @media (min-width: 1280px) {
    .details {
      grid-template-rows: repeat(12, 1.75rem);
    }

    .description p {
      -webkit-line-clamp: 7;
      line-clamp: 7;
    }
  }

  @media (min-width: 1536px) {
    .details {
      grid-template-rows: repeat(12, 2.25rem);
    }

    .description p {
      -webkit-line-clamp: 9;
      line-clamp: 9;
    }
  }
</style>

<script>
  const leftButton = document.getElementById("left-button");
  const rightButton = document.getElementById("right-button");

  leftButton?.addEventListener("click", () => {
    console.log("Left Button Clicked");
  });

  rightButton?.addEventListener("click", () => {
    console.log("Right Button Clicked");
  });
</script>
